{"version":3,"sources":["components/Card/Card.component.jsx","components/Cardlist/Cardlist.component.jsx","components/Searchbox/Searchbox.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","Cardlist","map","key","Searchbox","placeholder","handleChange","type","onChange","App","state","searchField","fetch","then","response","json","user","setState","this","filtered","filter","toLowerCase","includes","e","target","value","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"uTAGaA,G,YAAK,SAACC,GACf,OACA,yBAAKC,UAAU,kBACX,yBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BAC1B,4BAAKL,EAAMI,QAAQE,MACvB,2BAAIN,EAAMI,QAAQG,UCFLC,EAAS,SAACR,GACvB,OAAO,yBAAKC,UAAU,aACrBD,EAAMI,QAAQK,KAAI,SAAAL,GAAO,OACtB,kBAAC,EAAD,CAAMM,IAAKN,EAAQC,GAAID,QAASA,SCNvBO,G,MAAU,SAAC,GAAiC,IAAhCC,EAA+B,EAA/BA,YAAaC,EAAkB,EAAlBA,aAClC,OACI,2BAAOZ,UAAU,SAASW,YAAaA,EAAaE,KAAK,SAASC,SAAUF,MCiCrEG,G,wDA/Bb,aACC,IAAD,8BACE,gBAEKC,MAAM,CACTb,QAAQ,GACRc,YAAY,IALhB,E,gEAUD,IAAD,OACEC,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAI,OAAI,EAAKC,SAAS,CAACpB,QAASmB,S,+BAIrC,IAAD,SACgCE,KAAKR,MAA5Bb,EADT,EACSA,QAAQc,EADjB,EACiBA,YACTQ,EAAStB,EAAQuB,QAAO,SAAAvB,GAAO,OAAIA,EAAQE,KAAKsB,cAAcC,SAASX,EAAYU,kBACzF,OACE,yBAAK3B,UAAU,OACb,+CACA,kBAAC,EAAD,CAAWW,YAAY,SAASC,aAAc,SAAAiB,GAAC,OAAI,EAAKN,SAAS,CAACN,YAAaY,EAAEC,OAAOC,WACxF,kBAAC,EAAD,CAAU5B,QAASsB,S,GA3BTO,cCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1B,MAAK,SAAA2B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.82fc8fb2.chunk.js","sourcesContent":["import React from 'react'\nimport './Card.style.css'\n\nexport const Card=(props) => {\n    return(\n    <div className=\"card-container\">\n        <img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}></img>\n    <h2>{props.monster.name}</h2>\n<p>{props.monster.email}</p>\n</div>\n)\n}","import React from 'react'\n\nimport './Cardlist.style.css'\n\nimport { Card } from '../Card/Card.component'\n\nexport const Cardlist=(props) => {\nreturn(<div className=\"card-list\">\n{props.monster.map(monster => (\n    <Card key={monster.id} monster={monster}></Card>\n))}\n</div>)\n}","import React from 'react'\nimport './Searchbox.style.css'\n\nexport const Searchbox=({placeholder, handleChange}) => {\n    return(\n        <input className=\"search\" placeholder={placeholder} type=\"search\" onChange={handleChange}></input>\n    )\n}","import React, {Component} from 'react';\nimport { Cardlist } from './components/Cardlist/Cardlist.component'\nimport { Searchbox } from './components/Searchbox/Searchbox.component'\nimport './App.css';\n\nclass App extends Component {\n\n  constructor()\n  {\n    super();\n\n    this.state={\n      monster:[],\n      searchField:''\n    }\n  }\n\ncomponentDidMount()\n{\n  fetch('https://jsonplaceholder.typicode.com/users')\n  .then(response => response.json())\n  .then(user => this.setState({monster: user}))\n}\n\n  render()\n  {\n    const {monster,searchField} = this.state\n    const filtered=monster.filter(monster => monster.name.toLowerCase().includes(searchField.toLowerCase()))\n    return (\n      <div className=\"App\">\n        <h1>Monster Rolodex</h1>\n        <Searchbox placeholder=\"search\" handleChange={e => this.setState({searchField: e.target.value})}></Searchbox>\n        <Cardlist monster={filtered}></Cardlist>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}